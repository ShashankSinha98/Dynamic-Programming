import java.util.Arrays;

public class BooleanParenthesization {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String S = "T^T^T^F|F&F^F|T^F^T";
		int ans = countWays2(S.length(), S);
		System.out.println("Ans: "+ans);

	}
	
	static int T[][][];
	static int MOD = 1003;
	static int countWays(int N, String S){
        
		T = new int[N+1][N+1][2]; // 0:F, 1:T
		
		for(int i=0; i<=N; i++) {
			for(int j=0; j<=N; j++) {
				for(int k=0; k<2; k++) {
					T[i][j][k] = -1;
				}
			}
		}
		
		return solve(S, 0, N-1, true);
    }
	
	private static int solve(String S, int i, int j, boolean isTrue) {
		
		if(i>j) return 0;
		
		int thirdIdx = isTrue?1:0; 
		
		if(i==j) {
			if(isTrue) return S.charAt(i)=='T'?1:0;
			else return S.charAt(i)=='F'?1:0;
		}
		
		if(T[i][j][thirdIdx]!=-1) return T[i][j][thirdIdx];
			
		int ans = 0;
		for(int k=i+1; k<j; k+=2) {
			
			int LF = (T[i][k-1][0]!=-1)?T[i][k-1][0]:(T[i][k-1][0]=solve(S, i, k-1, false));
			int LT = (T[i][k-1][1]!=-1)?T[i][k-1][1]:(T[i][k-1][1]=solve(S, i, k-1, true));
			int RF = (T[k+1][j][0]!=-1)?T[k+1][j][0]:(T[k+1][j][0]=solve(S, k+1, j, false));
			int RT = (T[k+1][j][1]!=-1)?T[k+1][j][1]:(T[k+1][j][1]=solve(S, k+1, j, true));
			
			if(S.charAt(k)=='&') {
				if(isTrue) ans = (ans + (LT*RT)%MOD)%MOD;
				else ans = (ans + (LF*RF)%MOD + (LT*RF)%MOD + (LF*RT)%MOD)%MOD;
			} else if(S.charAt(k)=='|') {
				if(isTrue) ans = (ans + (RT*LT)%MOD + (LF*RT)%MOD + (LT*RF)%MOD)%MOD;
				else ans = (ans + (LF*RF))%MOD;
			} else if(S.charAt(k)=='^') {
				if(isTrue) ans= (ans+ (LF*RT)%MOD + (LT*RF)%MOD)%MOD;
				else ans= (ans + (LT*RT)%MOD + (LF*RF)%MOD)%MOD;
			}
		}
		
		return (T[i][j][thirdIdx]=ans%MOD);
	}


	public static int countWays2(int N, String S)
    {
        int dp[][][] = new int[N + 1][N + 1][2];

        for (int row[][] : dp)
            for (int col[] : row)
                Arrays.fill(col, -1);
        return parenthesis_count(S, 0, N - 1, 1, dp);
    }

    public static int parenthesis_count(String str, int i,
                                        int j, int isTrue,
                                        int[][][] dp)
    {
        if (i > j)
            return 0;

        if (i == j)
        {
            if (isTrue == 1)
            {
                return (str.charAt(i) == 'T') ? 1 : 0;
            }
            else 
            {
                return (str.charAt(i) == 'F') ? 1 : 0;
            }
        }

        if (dp[i][j][isTrue] != -1)
            return dp[i][j][isTrue];

        int temp_ans = 0;

        int leftTrue, rightTrue, leftFalse, rightFalse;

        for (int k = i + 1; k <= j - 1; k = k + 2) 
        {

            if (dp[i][k - 1][1] != -1)
                leftTrue = dp[i][k - 1][1];
            else
            {
                // Count number of True in left Partition
                leftTrue = parenthesis_count(str, i, k - 1,
                                             1, dp);
            }
            if (dp[i][k - 1][0] != -1)
                leftFalse = dp[i][k - 1][0];
            else 
            {
              
                // Count number of False in left Partition
                leftFalse = parenthesis_count(str, i, k - 1,
                                              0, dp);
            }
            if (dp[k + 1][j][1] != -1)
                rightTrue = dp[k + 1][j][1];
            else
            {
              
                // Count number of True in right Partition
                rightTrue = parenthesis_count(str, k + 1, j,
                                              1, dp);
            }
            if (dp[k + 1][j][0] != -1)
                rightFalse = dp[k + 1][j][0];
            else 
            {
              
                // Count number of False in right Partition
                rightFalse = parenthesis_count(str, k + 1,
                                               j, 0, dp);
            }

            // Evaluate AND operation
            if (str.charAt(k) == '&')
            {
                if (isTrue == 1) 
                {
                    temp_ans
                        = temp_ans + leftTrue * rightTrue;
                }
                else
                {
                    temp_ans = temp_ans
                               + leftTrue * rightFalse
                               + leftFalse * rightTrue
                               + leftFalse * rightFalse;
                }
            }
            // Evaluate OR operation
            else if (str.charAt(k) == '|')
            {
                if (isTrue == 1)
                {
                    temp_ans = temp_ans
                               + leftTrue * rightTrue
                               + leftTrue * rightFalse
                               + leftFalse * rightTrue;
                }
                else
                {
                    temp_ans
                        = temp_ans + leftFalse * rightFalse;
                }
            }
          
            // Evaluate XOR operation
            else if (str.charAt(k) == '^') 
            {
                if (isTrue == 1)
                {
                    temp_ans = temp_ans
                               + leftTrue * rightFalse
                               + leftFalse * rightTrue;
                }
                else 
                {
                    temp_ans = temp_ans
                               + leftTrue * rightTrue
                               + leftFalse * rightFalse;
                }
            }
            dp[i][j][isTrue] = temp_ans;
        }
        return temp_ans;
    }

}
