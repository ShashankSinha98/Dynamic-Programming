
public class BooleanParenthesization {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String S = "T|T&F^T";
		int ans = countWays(S.length(), S);
		System.out.println("Ans: "+ans);

	}
	
	static int T[][][];
	static int countWays(int N, String S){
        
		T = new int[N+1][N+1][2]; // 0:F, 1:T
		
		for(int i=0; i<=N; i++) {
			for(int j=0; j<=N; j++) {
				for(int k=0; k<2; k++) {
					T[i][j][k] = -1;
				}
			}
		}
		
		return solve(S, 0, N-1, true);
    }
	
	private static int solve(String S, int i, int j, boolean isTrue) {
		
		if(i>j) return 0;
		
		int thirdIdx = isTrue?1:0; 
		
		if(T[i][j][thirdIdx]!=-1) return T[i][j][thirdIdx];
		
		if(i==j) {
			if(isTrue) return S.charAt(i)=='T'?(T[i][j][thirdIdx]=1):(T[i][j][thirdIdx]=0);
			else return S.charAt(i)=='F'?(T[i][j][thirdIdx]=1):(T[i][j][thirdIdx]=0);
		}
			
		int ans = 0;
		for(int k=i+1; k<j; k+=2) {
			
			int LF = solve(S, i, k-1, false);
			int LT = solve(S, i, k-1, true);
			int RF = solve(S, k+1, j, false);
			int RT = solve(S, k+1, j, true);
			
			if(S.charAt(k)=='&') {
				if(isTrue) ans += LT*RT;
				else ans += LF*RF + LT*RF + LF*RF;
			} else if(S.charAt(k)=='|') {
				if(isTrue) ans += RT*LT + LF*RT + LT*RF;
				else ans += LF*RF;
			} else if(S.charAt(k)=='^' ) {
				if(isTrue) ans+= LF*RT + LT*RF;
				else ans+= LT*RT + LF*RF;
			}
		}
		
		return T[i][j][thirdIdx]=ans;
	}

}
